apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: korikonchi/backend:latest
          ports:
            - containerPort: 5000
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: backend-config
                  key: PORT
            - name: CLIENT_URL
              valueFrom:
                configMapKeyRef:
                  name: backend-config
                  key: CLIENT_URL
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: DATABASE_URL
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: JWT_SECRET
            - name: REFRESH_TOKEN_SECRET
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: REFRESH_TOKEN_SECRET
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: REDIS_URL
            - name: KAFKA_SERVICE
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: KAFKA_SERVICE
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: SESSION_SECRET
            - name: KAFKA_TOPIC
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: KAFKA_TOPIC
          resources:
            requests:
              cpu: '100m'
              memory: '128Mi'
            limits:
              cpu: '500m'
              memory: '512Mi'
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 5000
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /ready
          #     port: 5000
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
